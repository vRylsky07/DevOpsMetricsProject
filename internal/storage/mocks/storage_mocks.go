// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	constants "DevOpsMetricsProject/internal/constants"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageInterface is a mock of StorageInterface interface.
type MockStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageInterfaceMockRecorder
}

// MockStorageInterfaceMockRecorder is the mock recorder for MockStorageInterface.
type MockStorageInterfaceMockRecorder struct {
	mock *MockStorageInterface
}

// NewMockStorageInterface creates a new mock instance.
func NewMockStorageInterface(ctrl *gomock.Controller) *MockStorageInterface {
	mock := &MockStorageInterface{ctrl: ctrl}
	mock.recorder = &MockStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageInterface) EXPECT() *MockStorageInterfaceMockRecorder {
	return m.recorder
}

// GetMetricByName mocks base method.
func (m *MockStorageInterface) GetMetricByName(mType constants.MetricType, mName string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricByName", mType, mName)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricByName indicates an expected call of GetMetricByName.
func (mr *MockStorageInterfaceMockRecorder) GetMetricByName(mType, mName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricByName", reflect.TypeOf((*MockStorageInterface)(nil).GetMetricByName), mType, mName)
}

// InitMemStorage mocks base method.
func (m *MockStorageInterface) InitMemStorage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitMemStorage")
}

// InitMemStorage indicates an expected call of InitMemStorage.
func (mr *MockStorageInterfaceMockRecorder) InitMemStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitMemStorage", reflect.TypeOf((*MockStorageInterface)(nil).InitMemStorage))
}

// ReadMemStorageFields mocks base method.
func (m *MockStorageInterface) ReadMemStorageFields() (map[string]float64, map[string]int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMemStorageFields")
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(map[string]int)
	return ret0, ret1
}

// ReadMemStorageFields indicates an expected call of ReadMemStorageFields.
func (mr *MockStorageInterfaceMockRecorder) ReadMemStorageFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMemStorageFields", reflect.TypeOf((*MockStorageInterface)(nil).ReadMemStorageFields))
}

// UpdateMetricByName mocks base method.
func (m *MockStorageInterface) UpdateMetricByName(oper constants.UpdateOperation, mType constants.MetricType, mName string, mValue float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateMetricByName", oper, mType, mName, mValue)
}

// UpdateMetricByName indicates an expected call of UpdateMetricByName.
func (mr *MockStorageInterfaceMockRecorder) UpdateMetricByName(oper, mType, mName, mValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricByName", reflect.TypeOf((*MockStorageInterface)(nil).UpdateMetricByName), oper, mType, mName, mValue)
}
